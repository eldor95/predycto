// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	BroadcastModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Response, error)
	BroadcastUserPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*Response, error)
	BroadcastItemPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*Response, error)
	BroadcastLabelPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*Response, error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) BroadcastModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protocol.RouteGuide/BroadcastModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) BroadcastUserPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protocol.RouteGuide/BroadcastUserPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) BroadcastItemPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protocol.RouteGuide/BroadcastItemPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) BroadcastLabelPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protocol.RouteGuide/BroadcastLabelPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface {
	BroadcastModel(context.Context, *Model) (*Response, error)
	BroadcastUserPartition(context.Context, *Partition) (*Response, error)
	BroadcastItemPartition(context.Context, *Partition) (*Response, error)
	BroadcastLabelPartition(context.Context, *Partition) (*Response, error)
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct {
}

func (UnimplementedRouteGuideServer) BroadcastModel(context.Context, *Model) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastModel not implemented")
}
func (UnimplementedRouteGuideServer) BroadcastUserPartition(context.Context, *Partition) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastUserPartition not implemented")
}
func (UnimplementedRouteGuideServer) BroadcastItemPartition(context.Context, *Partition) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastItemPartition not implemented")
}
func (UnimplementedRouteGuideServer) BroadcastLabelPartition(context.Context, *Partition) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastLabelPartition not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	s.RegisterService(&_RouteGuide_serviceDesc, srv)
}

func _RouteGuide_BroadcastModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).BroadcastModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RouteGuide/BroadcastModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).BroadcastModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_BroadcastUserPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Partition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).BroadcastUserPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RouteGuide/BroadcastUserPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).BroadcastUserPartition(ctx, req.(*Partition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_BroadcastItemPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Partition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).BroadcastItemPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RouteGuide/BroadcastItemPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).BroadcastItemPartition(ctx, req.(*Partition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_BroadcastLabelPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Partition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).BroadcastLabelPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.RouteGuide/BroadcastLabelPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).BroadcastLabelPartition(ctx, req.(*Partition))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteGuide_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastModel",
			Handler:    _RouteGuide_BroadcastModel_Handler,
		},
		{
			MethodName: "BroadcastUserPartition",
			Handler:    _RouteGuide_BroadcastUserPartition_Handler,
		},
		{
			MethodName: "BroadcastItemPartition",
			Handler:    _RouteGuide_BroadcastItemPartition_Handler,
		},
		{
			MethodName: "BroadcastLabelPartition",
			Handler:    _RouteGuide_BroadcastLabelPartition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
