// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	// config distribute
	GetConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Config, error)
	// model distribute
	GetUserIndexVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Users, error)
	GetFactorizationMachineVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error)
	GetCollaborativeFilteringModelVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error)
	GetUserIndex(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Users, error)
	GetFactorizationMachine(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error)
	GetCollaborativeFilteringModel(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error)
	// cluster management
	GetCluster(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Cluster, error)
	RegisterServer(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	RegisterWorker(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) GetConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetUserIndexVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetUserIndexVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetFactorizationMachineVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetFactorizationMachineVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetCollaborativeFilteringModelVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetCollaborativeFilteringModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetUserIndex(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetUserIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetFactorizationMachine(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetFactorizationMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetCollaborativeFilteringModel(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetCollaborativeFilteringModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetCluster(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) RegisterServer(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protocol.Master/RegisterServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) RegisterWorker(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protocol.Master/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	// config distribute
	GetConfig(context.Context, *Void) (*Config, error)
	// model distribute
	GetUserIndexVersion(context.Context, *Void) (*Users, error)
	GetFactorizationMachineVersion(context.Context, *Void) (*Model, error)
	GetCollaborativeFilteringModelVersion(context.Context, *Void) (*Model, error)
	GetUserIndex(context.Context, *Void) (*Users, error)
	GetFactorizationMachine(context.Context, *Void) (*Model, error)
	GetCollaborativeFilteringModel(context.Context, *Void) (*Model, error)
	// cluster management
	GetCluster(context.Context, *Void) (*Cluster, error)
	RegisterServer(context.Context, *Void) (*Void, error)
	RegisterWorker(context.Context, *Void) (*Void, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) GetConfig(context.Context, *Void) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedMasterServer) GetUserIndexVersion(context.Context, *Void) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIndexVersion not implemented")
}
func (UnimplementedMasterServer) GetFactorizationMachineVersion(context.Context, *Void) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactorizationMachineVersion not implemented")
}
func (UnimplementedMasterServer) GetCollaborativeFilteringModelVersion(context.Context, *Void) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborativeFilteringModelVersion not implemented")
}
func (UnimplementedMasterServer) GetUserIndex(context.Context, *Void) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIndex not implemented")
}
func (UnimplementedMasterServer) GetFactorizationMachine(context.Context, *Void) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactorizationMachine not implemented")
}
func (UnimplementedMasterServer) GetCollaborativeFilteringModel(context.Context, *Void) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborativeFilteringModel not implemented")
}
func (UnimplementedMasterServer) GetCluster(context.Context, *Void) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedMasterServer) RegisterServer(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedMasterServer) RegisterWorker(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetConfig(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetUserIndexVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetUserIndexVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetUserIndexVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetUserIndexVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetFactorizationMachineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetFactorizationMachineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetFactorizationMachineVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetFactorizationMachineVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetCollaborativeFilteringModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetCollaborativeFilteringModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetCollaborativeFilteringModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetCollaborativeFilteringModelVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetUserIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetUserIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetUserIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetUserIndex(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetFactorizationMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetFactorizationMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetFactorizationMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetFactorizationMachine(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetCollaborativeFilteringModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetCollaborativeFilteringModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetCollaborativeFilteringModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetCollaborativeFilteringModel(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetCluster(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/RegisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).RegisterServer(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).RegisterWorker(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Master_GetConfig_Handler,
		},
		{
			MethodName: "GetUserIndexVersion",
			Handler:    _Master_GetUserIndexVersion_Handler,
		},
		{
			MethodName: "GetFactorizationMachineVersion",
			Handler:    _Master_GetFactorizationMachineVersion_Handler,
		},
		{
			MethodName: "GetCollaborativeFilteringModelVersion",
			Handler:    _Master_GetCollaborativeFilteringModelVersion_Handler,
		},
		{
			MethodName: "GetUserIndex",
			Handler:    _Master_GetUserIndex_Handler,
		},
		{
			MethodName: "GetFactorizationMachine",
			Handler:    _Master_GetFactorizationMachine_Handler,
		},
		{
			MethodName: "GetCollaborativeFilteringModel",
			Handler:    _Master_GetCollaborativeFilteringModel_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Master_GetCluster_Handler,
		},
		{
			MethodName: "RegisterServer",
			Handler:    _Master_RegisterServer_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Master_RegisterWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
