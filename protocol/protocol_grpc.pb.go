// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	BroadcastModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Void, error)
	BroadcastUserPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*Void, error)
	GetModelVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error)
	GetUserPartitionVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) BroadcastModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protocol.Worker/BroadcastModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) BroadcastUserPartition(ctx context.Context, in *Partition, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protocol.Worker/BroadcastUserPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetModelVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/protocol.Worker/GetModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetUserPartitionVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/protocol.Worker/GetUserPartitionVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	BroadcastModel(context.Context, *Model) (*Void, error)
	BroadcastUserPartition(context.Context, *Partition) (*Void, error)
	GetModelVersion(context.Context, *Void) (*Version, error)
	GetUserPartitionVersion(context.Context, *Void) (*Version, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) BroadcastModel(context.Context, *Model) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastModel not implemented")
}
func (UnimplementedWorkerServer) BroadcastUserPartition(context.Context, *Partition) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastUserPartition not implemented")
}
func (UnimplementedWorkerServer) GetModelVersion(context.Context, *Void) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelVersion not implemented")
}
func (UnimplementedWorkerServer) GetUserPartitionVersion(context.Context, *Void) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPartitionVersion not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_BroadcastModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).BroadcastModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Worker/BroadcastModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).BroadcastModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_BroadcastUserPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Partition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).BroadcastUserPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Worker/BroadcastUserPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).BroadcastUserPartition(ctx, req.(*Partition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Worker/GetModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetModelVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetUserPartitionVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetUserPartitionVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Worker/GetUserPartitionVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetUserPartitionVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastModel",
			Handler:    _Worker_BroadcastModel_Handler,
		},
		{
			MethodName: "BroadcastUserPartition",
			Handler:    _Worker_BroadcastUserPartition_Handler,
		},
		{
			MethodName: "GetModelVersion",
			Handler:    _Worker_GetModelVersion_Handler,
		},
		{
			MethodName: "GetUserPartitionVersion",
			Handler:    _Worker_GetUserPartitionVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
