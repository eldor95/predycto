// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	// config distribute
	GetConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Config, error)
	// model distribute
	GetRankModelVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error)
	GetMatchModelVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error)
	GetRankModel(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error)
	GetMatchModel(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error)
	// cluster management
	GetCluster(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Cluster, error)
	RegisterServer(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	RegisterWorker(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) GetConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetRankModelVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetRankModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetMatchModelVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetMatchModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetRankModel(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetRankModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetMatchModel(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetMatchModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetCluster(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/protocol.Master/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) RegisterServer(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protocol.Master/RegisterServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) RegisterWorker(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/protocol.Master/RegisterWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	// config distribute
	GetConfig(context.Context, *Void) (*Config, error)
	// model distribute
	GetRankModelVersion(context.Context, *Void) (*Model, error)
	GetMatchModelVersion(context.Context, *Void) (*Model, error)
	GetRankModel(context.Context, *Void) (*Model, error)
	GetMatchModel(context.Context, *Void) (*Model, error)
	// cluster management
	GetCluster(context.Context, *Void) (*Cluster, error)
	RegisterServer(context.Context, *Void) (*Void, error)
	RegisterWorker(context.Context, *Void) (*Void, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) GetConfig(context.Context, *Void) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedMasterServer) GetRankModelVersion(context.Context, *Void) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankModelVersion not implemented")
}
func (UnimplementedMasterServer) GetMatchModelVersion(context.Context, *Void) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchModelVersion not implemented")
}
func (UnimplementedMasterServer) GetRankModel(context.Context, *Void) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankModel not implemented")
}
func (UnimplementedMasterServer) GetMatchModel(context.Context, *Void) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchModel not implemented")
}
func (UnimplementedMasterServer) GetCluster(context.Context, *Void) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedMasterServer) RegisterServer(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedMasterServer) RegisterWorker(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetConfig(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetRankModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetRankModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetRankModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetRankModelVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetMatchModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetMatchModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetMatchModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetMatchModelVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetRankModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetRankModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetRankModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetRankModel(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetMatchModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetMatchModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetMatchModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetMatchModel(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetCluster(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/RegisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).RegisterServer(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Master/RegisterWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).RegisterWorker(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Master_GetConfig_Handler,
		},
		{
			MethodName: "GetRankModelVersion",
			Handler:    _Master_GetRankModelVersion_Handler,
		},
		{
			MethodName: "GetMatchModelVersion",
			Handler:    _Master_GetMatchModelVersion_Handler,
		},
		{
			MethodName: "GetRankModel",
			Handler:    _Master_GetRankModel_Handler,
		},
		{
			MethodName: "GetMatchModel",
			Handler:    _Master_GetMatchModel_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Master_GetCluster_Handler,
		},
		{
			MethodName: "RegisterServer",
			Handler:    _Master_RegisterServer_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Master_RegisterWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
